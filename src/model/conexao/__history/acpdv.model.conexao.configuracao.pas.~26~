unit acpdv.model.conexao.configuracao;

interface

uses
 System.SysUtils,
 System.IniFiles,
 System.Classes,
 System.ZLib;

type
 TConfiguracao = class
 private
  FPath: String;
  FArquivo: TIniFile;
  procedure Comprimir;
  procedure Descomprimir;

 CONST
  ARQUIVOINI = 'CONFIGURACAO.CONF';
  TEMPINI = 'TEMP';
  SESAOCONF = 'CONFIGURACAO';

 public
  constructor Create(Path: String);
  destructor Destroy; override;
  class function New(Path: String): TConfiguracao;
  function SetDatabase(Value: String): TConfiguracao;
  function GetDatabase: String;
  function SetUserName(Value: String): TConfiguracao;
  function GetUserName: String;
  function SetPassword(Value: String): TConfiguracao;
  function GetPassword: String;
  function SetDriveID(Value: String): TConfiguracao;
  function GetDriveID: String;
  procedure Build;
  procedure ReBuild;
 end;

implementation

{ TConfiguracao }

procedure TConfiguracao.Build;
begin
 Comprimir;
end;

procedure TConfiguracao.Comprimir;
var
 lImput, lOutput: TStringStream;
begin
lImput:= TStringStream.Create;
lOutput:= TStringStream.Create;
try
lImput.LoadFromFile(FPath+ARQUIVOINI);
ZCompressStream(lImput,lOutput);
lOutput.SaveToFile(FPath+ARQUIVOINI);
finally
 lImput.Free;
 lOutput.Free;
end;
end;

constructor TConfiguracao.Create(Path: String);
begin
 FPath := Path;
 FArquivo := TIniFile.Create(FPath + ARQUIVOINI);
end;

procedure TConfiguracao.Descomprimir;
var
 lImput, lOutput: TStringStream;
begin
lImput:= TStringStream.Create;
lOutput:= TStringStream.Create;
try
lImput.LoadFromFile(FPath+ARQUIVOINI);
ZCompressStream(lImput,lOutput);
lOutput.SaveToFile(FPath+ARQUIVOINI);
finally
 lImput.Free;
 lOutput.Free;
end;

end;

destructor TConfiguracao.Destroy;
begin
 FArquivo.Free;
 inherited;
end;

function TConfiguracao.GetDatabase: String;
begin
 Result := FArquivo.ReadString(SESAOCONF, 'DATABASE', '');
end;

function TConfiguracao.GetDriveID: String;
begin
 Result := FArquivo.ReadString(SESAOCONF, 'DRIVEID', '');
end;

function TConfiguracao.GetPassword: String;
begin
 Result := FArquivo.ReadString(SESAOCONF, 'PASSWORD', '');
end;

function TConfiguracao.GetUserName: String;
begin
 Result := FArquivo.ReadString(SESAOCONF, 'USERNAME', '');
end;

class function TConfiguracao.New(Path: String): TConfiguracao;
begin
 Result := Self.Create(Path);
end;

procedure TConfiguracao.ReBuild;
begin
 Descomprimir;
end;

function TConfiguracao.SetDatabase(Value: String): TConfiguracao;
begin
 Result := Self;
 FArquivo.WriteString(SESAOCONF, 'DATABASE', Value);
end;

function TConfiguracao.SetDriveID(Value: String): TConfiguracao;
begin
 Result := Self;
 FArquivo.WriteString(SESAOCONF, 'DRIVEID', Value);
end;

function TConfiguracao.SetPassword(Value: String): TConfiguracao;
begin
 Result := Self;
 FArquivo.WriteString(SESAOCONF, 'PASSWORD', Value);;
end;

function TConfiguracao.SetUserName(Value: String): TConfiguracao;
begin
 Result := Self;
 FArquivo.WriteString(SESAOCONF, 'USERNAME', Value);
end;

end.
