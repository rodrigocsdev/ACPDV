unit acpdv.utils.trataexceptions;

interface
uses
  System.SysUtils,
  Vcl.Forms,
  Vcl.Graphics,
  Vcl.Imaging.jpeg,
  acpdv.view.componente.mensagens,
  System.Classes;
type
  TException = class
  private
    FLogFile: String;
    FApplicationPath: String;
    FLogPath: String;
    FLogImages: String;
    procedure GravarImagemFormulario(const NomeArquivo: string;
      Formulario: TForm);
    procedure TrataException(Sender: TObject; E: Exception);
    procedure GravarLog(aInfo, aMessage: String);
    procedure TrataMensagem(Owner: TComponent; E: Exception);
  public
    constructor Create;

  end;
implementation
uses
  Vcl.ExtCtrls,
  VCL.Dialogs;
{ TException }
constructor TException.Create;
begin
  FApplicationPath := IncludeTrailingPathDelimiter
    (ExtractFilePath(ParamStr(0)));
  FLogPath := IncludeTrailingPathDelimiter(FApplicationPath + 'LOGS');
  FLogImages := IncludeTrailingPathDelimiter(FLogPath + 'IMAGES');
  FLogFile := FLogPath + ExtractFileName(ChangeFileExt(ParamStr(0), '')) +'.log';
  ForceDirectories(FLogPath);
  ForceDirectories(FLogImages);
  Application.OnException := TrataException;
end;

procedure TException.GravarImagemFormulario(const NomeArquivo: string;
  Formulario: TForm);
var
  Bitmap: TBitmap;
  jpeg: TJpegImage;
begin
  Bitmap := TBitmap.Create;
  jpeg := TJpegImage.Create;
//  try
    Bitmap.Assign(Formulario.GetFormImage);
    jpeg.Assign(Bitmap);
    jpeg.SaveToFile(Format('%s\%s.jpg', [FLogImages, NomeArquivo]));
 // finally
    FreeAndNil(jpeg);
    FreeAndNil(Bitmap);
//  end;
end;
procedure TException.GravarLog(aInfo, aMessage: String);
var
  ArquivoLog : TextFile;
begin
  AssignFile(ArquivoLog, FLogFile);
  if not FileExists(FLogFile) then
    Rewrite(ArquivoLog)
  else
    Append(ArquivoLog);

  WriteLn(ArquivoLog, aInfo + aMessage);
  CloseFile(ArquivoLog);
end;
procedure TException.TrataException(Sender: TObject; E: Exception);
var
  lDataHora: String;
begin
  lDataHora := FormatDateTime('ddmmyyyyhhnnss', now);
  GravarLog('[Data/Hora.......] ', FormatDateTime('dd/mm/yyyy hh:mm:ss',Now));
  GravarLog('[Mensagem........] ', E.Message);
  GravarLog('[Classe Exceção..] ', E.ClassName);
  if (TComponent(Sender) is TForm) then
    GravarLog('[Formulário......] ', TForm(Sender).Name)
  else
    GravarLog('[Formulário......] ', TForm(TComponent(Sender).Owner).Name);
  GravarLog('[Unit............] ', Sender.UnitName);
  GravarLog('[Controle Visual.] ', Screen.ActiveControl.Name);
  GravarLog('', StringOfChar('-', 70));
  GravarLog('', '');
  GravarImagemFormulario(lDataHora, Screen.ActiveForm);
  TrataMensagem(TComponent(Sender).Owner,E);
end;
procedure TException.TrataMensagem(Owner: TComponent; E: Exception);
var
  lMensage: TPageMensagens;
  lPanel: TPanel;
  I: Integer;
begin
  lMensage := TPageMensagens.New(Owner);
  if TForm(Owner).Parent <> nil then
    lMensage.Embed(TPanel(TForm(Owner).Parent))
  else
  begin
   lPanel:= TPanel(TForm(Owner).Controls[0]);
    for I := Pred(lPanel.ControlCount) downto 0 do
    begin
      if (lPanel.Controls[I] is TPanel) and (lPanel.Controls[I].Tag = 255) then
         lMensage.Embed(TPanel(lPanel.Controls[I]));
    end;
  end;
 if E is EConvertError then
    lMensage
      .Mensagem('Erro na conversão dos dados', ERRO)
      .ClickOk(procedure (Sender: TObject)
      begin
        //
      end);
end;
var
  MinhaExcecao: TException;
initialization
  MinhaExcecao := TException.Create;
finalization
  FreeAndNil(MinhaExcecao);
end.
